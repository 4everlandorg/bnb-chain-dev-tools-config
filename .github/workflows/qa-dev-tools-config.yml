name: qa-dev-tools-config CI/DI

# events
on:
  push:
    branches: [ pre-release/dev-tools-config ]
  pull_request:
    branches: [ pre-release/dev-tools-config ]

env:
  REGION: us-east-1
  ACCOUNT_ID: 553885929720
  AWS_ASSUMED_ROLE_ARN: arn:aws:iam::553885929720:role/tf_nodereal_prod_ecr_cicd_deployment_assume_role
  APP_NAME: dev-tools-config

jobs:
  CI:
    runs-on: [self-hosted,qa-infra-k8s]
    steps:
    - uses: hmarr/debug-action@v2
    - uses: actions/checkout@v3

    - name: aws assume role
      id: aws-assume-role
      run: |
        UUID=$(cat /proc/sys/kernel/random/uuid)
        OUT=$(aws sts assume-role --role-arn $AWS_ASSUMED_ROLE_ARN --role-session-name $UUID)
        echo ::set-output name=aws_access_key_id::"$(echo $OUT | jq -r '.Credentials''.AccessKeyId')"
        echo ::set-output name=aws_secret_key::"$(echo $OUT | jq -r '.Credentials''.SecretAccessKey')"
        echo ::set-output name=aws_sessions_token::"$(echo $OUT | jq -r '.Credentials''.SessionToken')"
    - name: Build, tag, and push image to Amazon ECR
      env:
        AWS_ACCESS_KEY_ID: ${{ steps.aws-assume-role.outputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ steps.aws-assume-role.outputs.aws_secret_key }}
        AWS_SESSION_TOKEN: ${{ steps.aws-assume-role.outputs.aws_sessions_token }}
      run: |
        GITHUB_SHA=$(git rev-parse HEAD)
        IMAGE_NAME=${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${APP_NAME}:${GITHUB_SHA}
        aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin  ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com
        aws ecr --region ${REGION} describe-repositories --registry-id ${ACCOUNT_ID} --repository-names ${APP_NAME} || aws ecr --region ${REGION} create-repository --registry-id ${ACCOUNT_ID} --repository-name ${APP_NAME}
        aws ecr --region ${REGION} set-repository-policy --registry-id ${ACCOUNT_ID} --repository-name ${APP_NAME} --policy-text file:///home/runner/repo-access-permissions.json || true

        docker build --build-arg COMMIT_SHA=${GITHUB_SHA} \
              --build-arg NETWORK=qa \
              -f dockerfile-qa . -t ${IMAGE_NAME}

        docker push ${IMAGE_NAME}
  CD:
    needs: [CI]
    runs-on: [self-hosted, qa-infra-k8s]
    steps:
    - name: clone the gitops config repo
      uses: actions/checkout@v3
      with:
        repository: node-real/nodereal-app
        token: ${{ secrets.GO_MODULES_TOKEN }}
    - name: update image tag in gitops config repo
      env:
        GIT_SYNC_PATH: qa/gitops/qa-us/web-ui/dev-tools-config.yaml
        TAG_FIELD: .spec.values.image.tag
      run: |
        yq e "$TAG_FIELD = \"${GITHUB_SHA}\"" -i $GIT_SYNC_PATH
    - name: Set PR branch name
      id: vars
      run: echo ::set-output name=branch-name::"github-action-patches/${GITHUB_SHA::7}"
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.GO_MODULES_TOKEN }}
        commit-message: update image tag
        title: github action CD auto-update
        labels: |
          lgtm
        body: TGIF
        branch: ${{ steps.vars.outputs.branch-name }}
